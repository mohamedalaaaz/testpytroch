{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOu3pjyta2ggldYazMuBc60",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mohamedalaaaz/testpytroch/blob/main/physics%20space%20ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 368
        },
        "id": "cRqt4jtJyH1L",
        "outputId": "7b8612c8-e480-41b1-f694-6ccfafb817d4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/torch/optim/lr_scheduler.py:62: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "iter    1 | loss=nan | M_est=[nan, nan, nan] | rel_err=[nan, nan, nan]\n",
            "iter   50 | loss=nan | M_est=[nan, nan, nan] | rel_err=[nan, nan, nan]\n",
            "iter  100 | loss=nan | M_est=[nan, nan, nan] | rel_err=[nan, nan, nan]\n",
            "iter  150 | loss=nan | M_est=[nan, nan, nan] | rel_err=[nan, nan, nan]\n",
            "iter  200 | loss=nan | M_est=[nan, nan, nan] | rel_err=[nan, nan, nan]\n",
            "iter  250 | loss=nan | M_est=[nan, nan, nan] | rel_err=[nan, nan, nan]\n",
            "iter  300 | loss=nan | M_est=[nan, nan, nan] | rel_err=[nan, nan, nan]\n",
            "iter  350 | loss=nan | M_est=[nan, nan, nan] | rel_err=[nan, nan, nan]\n",
            "iter  400 | loss=nan | M_est=[nan, nan, nan] | rel_err=[nan, nan, nan]\n",
            "\n",
            "True masses (kg):    [1.98847000e+30 5.97220000e+24 7.34767309e+22]\n",
            "Estimated masses (kg): [nan nan nan]\n",
            "Relative errors:      [nan nan nan]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\nExtensions / Ideas\\n- Fit initial states (pos/vel) jointly with masses using the same approach.\\n- Add solar radiation pressure or J2 oblateness terms for satellites.\\n- Switch to canonical units where G=1 to improve conditioning and larger time steps.\\n- Replace the explicit simulator with a learned correction using a Graph Neural Network.\\n- Use torch.compile() (PyTorch 2+) to speed up the integrator on GPU.\\n- Add differentiable event handling (e.g., close approaches) with smooth penalties.\\n'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "\n",
        "from __future__ import annotations\n",
        "import math\n",
        "import torch\n",
        "from dataclasses import dataclass\n",
        "\n",
        "# ------------------------------\n",
        "# Config & device\n",
        "# ------------------------------\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "dtype = torch.double\n",
        "\n",
        "torch.set_default_dtype(dtype)  # use float64 for astronomy scales\n",
        "\n",
        "# Physical constants (SI)\n",
        "G = torch.tensor(6.67430e-11, device=device, dtype=dtype)  # m^3 kg^-1 s^-2\n",
        "\n",
        "# Softening length (Plummer-like) to avoid singularities in close passes\n",
        "EPS = torch.tensor(1e7, device=device, dtype=dtype)  # meters (10,000 km)\n",
        "\n",
        "# Time settings\n",
        "DT = 3600.0  # seconds per step (1 hour)\n",
        "STEPS = 24 * 90  # 90 days of simulation\n",
        "\n",
        "@dataclass\n",
        "class SystemState:\n",
        "    pos: torch.Tensor  # (N, 3)\n",
        "    vel: torch.Tensor  # (N, 3)\n",
        "\n",
        "\n",
        "def pairwise_accel(pos: torch.Tensor, masses: torch.Tensor) -> torch.Tensor:\n",
        "    \"\"\"Compute gravitational accelerations on each body due to all others.\n",
        "    pos:    (N,3)\n",
        "    masses: (N,)\n",
        "    returns acc: (N,3)\n",
        "    \"\"\"\n",
        "    # Compute pairwise displacement vectors r_ij = r_j - r_i\n",
        "    r = pos.unsqueeze(1) - pos.unsqueeze(0)  # (N,N,3) r_ij = r_i - r_j\n",
        "    r = -r  # switch to r_ij = r_j - r_i for intuition\n",
        "\n",
        "    # Distance with softening to avoid division by zero\n",
        "    dist2 = (r*r).sum(-1) + EPS**2  # (N,N)\n",
        "    inv_dist3 = dist2.pow(-1.5)     # (N,N)\n",
        "\n",
        "    # Force magnitude per pair: G * m_i * m_j / |r|^3 times vector r_ij\n",
        "    # We compute acceleration on i: a_i = sum_j G*m_j * r_ij/|r|^3\n",
        "    m_j = masses.unsqueeze(0)  # (1,N)\n",
        "    a = (G * m_j.unsqueeze(-1) * r * inv_dist3.unsqueeze(-1)).sum(dim=1)  # (N,3)\n",
        "    return a\n",
        "\n",
        "\n",
        "def leapfrog_step(state: SystemState, masses: torch.Tensor, dt: float) -> SystemState:\n",
        "    \"\"\"Velocity Verlet / Leapfrog step (kick-drift-kick).\"\"\"\n",
        "    a0 = pairwise_accel(state.pos, masses)\n",
        "    v_half = state.vel + 0.5 * dt * a0\n",
        "    x_new = state.pos + dt * v_half\n",
        "    a1 = pairwise_accel(x_new, masses)\n",
        "    v_new = v_half + 0.5 * dt * a1\n",
        "    return SystemState(x_new, v_new)\n",
        "\n",
        "\n",
        "def simulate(initial: SystemState, masses: torch.Tensor, steps: int, dt: float) -> torch.Tensor:\n",
        "    \"\"\"Simulate and return positions over time: (steps+1, N, 3).\"\"\"\n",
        "    pos_traj = [initial.pos]\n",
        "    state = SystemState(initial.pos, initial.vel)\n",
        "    for _ in range(steps):\n",
        "        state = leapfrog_step(state, masses, dt)\n",
        "        pos_traj.append(state.pos)\n",
        "    return torch.stack(pos_traj, dim=0)\n",
        "\n",
        "\n",
        "# ----------------------------------------------\n",
        "# Construct a Sun–Earth–Moon ground-truth system\n",
        "# ----------------------------------------------\n",
        "# True masses (kg)\n",
        "M_sun  = 1.98847e30\n",
        "M_earth= 5.9722e24\n",
        "M_moon = 7.34767309e22\n",
        "m_true = torch.tensor([M_sun, M_earth, M_moon], device=device, dtype=dtype)\n",
        "\n",
        "# Initial positions (meters)\n",
        "# Sun at origin, Earth at ~1 AU on +x, Moon offset from Earth\n",
        "AU = 1.495978707e11\n",
        "R_em = 384400e3\n",
        "\n",
        "pos0 = torch.tensor([\n",
        "    [0.0, 0.0, 0.0],             # Sun\n",
        "    [AU, 0.0, 0.0],               # Earth\n",
        "    [AU + R_em, 0.0, 0.0],        # Moon (along x from Earth)\n",
        "], device=device, dtype=dtype)\n",
        "\n",
        "# Initial velocities (m/s): Earth ~29.78 km/s in +y; Moon ~1.022 km/s about Earth\n",
        "v_earth = 29780.0\n",
        "v_moon_rel = 1022.0\n",
        "\n",
        "vel0 = torch.tensor([\n",
        "    [0.0, 0.0, 0.0],\n",
        "    [0.0, v_earth, 0.0],\n",
        "    [0.0, v_earth + v_moon_rel, 0.0],\n",
        "], device=device, dtype=dtype)\n",
        "\n",
        "initial_state_true = SystemState(pos0, vel0)\n",
        "\n",
        "with torch.no_grad():\n",
        "    pos_traj_true = simulate(initial_state_true, m_true, STEPS, DT)  # (T,N,3)\n",
        "\n",
        "# Create noisy \"observations\" every k steps (e.g., daily)\n",
        "OBS_EVERY = 24  # observe once per day (24h)\n",
        "obs_idx = torch.arange(0, STEPS+1, OBS_EVERY, device=device)\n",
        "noise_std = 5e5  # 500 km observation noise\n",
        "\n",
        "obs_pos = pos_traj_true[obs_idx] + noise_std * torch.randn_like(pos_traj_true[obs_idx])\n",
        "\n",
        "# -------------------------------------------------\n",
        "# Inverse problem: estimate masses from observations\n",
        "# -------------------------------------------------\n",
        "# We assume initial positions/velocities and G are known.\n",
        "# Parameterize masses with softplus to keep them positive.\n",
        "\n",
        "m_init_guess = torch.tensor([1.5e30, 3.0e24, 1.0e23], device=device, dtype=dtype)  # poor guesses\n",
        "raw_params = torch.log(torch.expm1(m_init_guess))  # inverse softplus for initialization\n",
        "raw_params = torch.nn.Parameter(raw_params)\n",
        "\n",
        "optimizer = torch.optim.Adam([raw_params], lr=1e1)  # relatively high LR; double precision helps\n",
        "scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, factor=0.5, patience=20, verbose=False)\n",
        "\n",
        "# Optional: weight the Earth/Moon observations more than the Sun if desired\n",
        "obs_weights = torch.tensor([1.0, 5.0, 10.0], device=device, dtype=dtype)  # (N,)\n",
        "\n",
        "\n",
        "def loss_fn(masses_pos: torch.Tensor) -> torch.Tensor:\n",
        "    masses = torch.nn.functional.softplus(masses_pos)\n",
        "    traj = simulate(initial_state_true, masses, STEPS, DT)  # (T,N,3)\n",
        "    pred_obs = traj[obs_idx]  # align with observation times\n",
        "    diff = (pred_obs - obs_pos)  # (T_obs,N,3)\n",
        "    # Weighted MSE across bodies\n",
        "    w = obs_weights.view(1, -1, 1)\n",
        "    mse = (w * diff.pow(2)).mean()\n",
        "    # Add gentle L2 prior to keep masses near astrophysical scale (stabilization)\n",
        "    prior = 1e-6 * ((masses / m_true - 1.0).pow(2)).mean()\n",
        "    return mse + prior\n",
        "\n",
        "\n",
        "# Optimization loop\n",
        "MAX_ITERS = 400\n",
        "for it in range(1, MAX_ITERS + 1):\n",
        "    optimizer.zero_grad()\n",
        "    L = loss_fn(raw_params)\n",
        "    L.backward()\n",
        "    torch.nn.utils.clip_grad_norm_([raw_params], max_norm=1e12)\n",
        "    optimizer.step()\n",
        "    scheduler.step(L)\n",
        "\n",
        "    if it % 50 == 0 or it == 1:\n",
        "        masses_est = torch.nn.functional.softplus(raw_params).detach()\n",
        "        rel_err = (masses_est - m_true).abs() / m_true\n",
        "        print(f\"iter {it:4d} | loss={L.item():.3e} | M_est=[{masses_est[0]:.3e}, {masses_est[1]:.3e}, {masses_est[2]:.3e}] | rel_err=[{rel_err[0]:.2e}, {rel_err[1]:.2e}, {rel_err[2]:.2e}]\")\n",
        "\n",
        "# Final report\n",
        "masses_est = torch.nn.functional.softplus(raw_params).detach()\n",
        "print(\"\\nTrue masses (kg):   \", m_true.cpu().numpy())\n",
        "print(\"Estimated masses (kg):\", masses_est.cpu().numpy())\n",
        "print(\"Relative errors:     \", ((masses_est - m_true).abs() / m_true).cpu().numpy())\n",
        "\n",
        "# Optional: simulate with estimated masses for visualization / further analysis\n",
        "with torch.no_grad():\n",
        "    pos_traj_est = simulate(initial_state_true, masses_est, STEPS, DT)\n",
        "\n",
        "\n"
      ]
    }
  ]
}